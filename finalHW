# Инструкция для работы с Git и удалёнными репозиториями

![git logo](C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\git logo.jpeg)

## Что такое Git?
[Git](https://git-scm.com/) - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.

Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux, первая версия выпущена 7 апреля 2005 года. На сегодняшний день его поддерживает Джунио Хамано.

Среди проектов, использующих Git — ядро Linux, Swift, Android, Drupal, Cairo, GNU Core Utilities, Mesa, Wine, Chromium, Compiz Fusion, FlightGear, jQuery, PHP, NASM, MediaWiki, DokuWiki, Qt, ряд дистрибутивов Linux.

Программа является свободной и выпущена под лицензией GNU GPL версии 2.

## Подготовка репозитория
Для создание репозитория необходимо выполнить команду 
>*git init*  

в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git)

![git init](C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\init.jpeg)

## Создание коммитов

### Git add
Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите:
> *git add <имя файла>*

Это первая команда в цепочке операций, предписывающей Git «сохранить» снимок текущего состояния проекта в истории коммитов. Когда git add используется как отдельная команда, она переносит ожидающие изменения из рабочего каталога в раздел проиндексированных файлов.

![git add](C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\add.jpeg)

Также можно использовать команду 
>*git add -A*

чтобы добавить изменения во все изменённве файлы.

![git add](C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\add -A.jpeg)

### Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать:
> *git status*

Команда отображает состояние рабочего каталога и раздела проиндексированных файлов. С ее помощью можно проверить индексацию изменений и увидеть файлы, которые не отслеживаются Git.

![git status](C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\status1.jpeg)

Если в репозитории есть незакоммиченные изменения, эта информациябудет выделена красным цветом.

![git status] (C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\status2.jpeg)

Строка для конфликта

### Создание коммитов
Для того, чтобы создать коммит(сохранение) необходимо выполнить команду *git commit*. Выполняется она так: 
>*git commit -m "<сообщение к коммиту>*. 

![git commit] (C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\commit.jpeg)

Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту писать ***ОБЯЗАТЕЛЬНО***.

## Перемещение между сохранениями
Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она в папке с пепозиторием следующим образом: 
>*git checkout <номер коммита>*

Чтобы получить номер коммита, можно воспользоваться журналом изменений.

## Журнал изменений
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием.

![git commit] (C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\log.jpeg)

## Ветки в Git

### Создание ветки

Для того, чтобы создать ветку, используется команда *git branch*. Делается это следующим образом в папке с репозиторием: 
>*git branch <название новой ветки>*

Команда позволяет создавать, просматривать, переименовывать и удалять ветки. Она не дает возможности переключаться между ветками или выполнять слияние разветвленной истории. Именно поэтому команда git branch тесно связана с командами *git checkout* и *git merge*.

## Слияние веток

Для того чтобы дабавить ветку в текущую ветку используется команда 
>*git merge <name branch>*

![git commit] (C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\merge.jpeg)

## Удаление веток
Для удаления ветки ввести команду 
>"git branch -d 'name branch'"

![git -d] (C:\Users\User\Desktop\Питон\GB\MD_ПЗ_1\ -d.jpeg)